// Code generated by go-bindata.
// sources:
// filterfiles/blockedmimes.json
// filterfiles/blockedsites.json
// filterfiles/dontbump.json
// filterfiles/exceptionsitelist.json
// filterfiles/stopwords.json
// DO NOT EDIT!

package gatesentry2filters

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filterfilesBlockedmimesJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\x56\xca\x4e\xad\x2c\xcf\x2f\x4a\x29\x56\xb2\x8a\x8e\xad\x05\x04\x00\x00\xff\xff\xdb\x0b\x7f\x11\x0f\x00\x00\x00")

func filterfilesBlockedmimesJsonBytes() ([]byte, error) {
	return bindataRead(
		_filterfilesBlockedmimesJson,
		"filterfiles/blockedmimes.json",
	)
}

func filterfilesBlockedmimesJson() (*asset, error) {
	bytes, err := filterfilesBlockedmimesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "filterfiles/blockedmimes.json", size: 15, mode: os.FileMode(420), modTime: time.Unix(1490266110, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filterfilesBlockedsitesJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x57\xc1\x6e\xdc\x46\x0c\xbd\xfb\x2b\x84\x3d\xc7\x23\x3b\xf0\xa5\xbe\xb6\xb7\x1e\x7a\xf0\xa1\x87\xa2\x08\xa8\x19\x4a\x62\x35\x1a\x4e\x39\xd4\x6a\xe5\x20\xff\x5e\x68\x95\x04\xb6\xb3\xd8\x86\x0a\xd0\x5e\xb5\xfb\x1e\xdf\x90\x7c\x43\xce\xc7\xc3\x80\xcb\xcc\x12\xca\xe1\xf1\x8f\x9b\xaa\xfa\x78\x53\x55\x55\x75\xf8\x99\x93\x62\xd2\xc3\x63\x75\x28\x09\x32\x84\xe2\x3c\x8f\x87\x77\xdb\xaf\x4f\x9e\x05\x0f\x8f\xd5\xdd\x4d\x55\x7d\x7a\x77\x11\x15\xd0\x53\x40\x37\xd2\x29\x43\xc2\xb8\xa2\xeb\xed\x9b\x81\x04\x72\xbe\x1d\x11\xca\x24\x38\x62\x52\xa3\x04\x1f\x09\x93\x96\x7b\xd7\x31\x77\x11\xcf\x12\xb4\xc9\xc2\xa7\xa5\x86\xb6\xfe\x7b\x42\x59\xfe\x3f\xba\x17\x2c\x9e\xc7\x1c\x51\xb1\x2e\x08\xe2\x7b\x03\x09\x27\x2c\xd4\x25\x88\x97\x52\x73\xff\x5d\xc1\xa1\x2c\xc9\xd7\x09\x67\x85\x66\x17\x83\xcb\xc3\x8f\x93\xd4\x0b\x4f\x3a\x35\x48\xf5\xf1\xbe\xde\xc7\xf0\xa1\xf6\xbd\xf0\x88\xfb\xe0\xeb\x29\xbe\x30\x18\x08\x20\x53\x71\xaf\x44\x18\xc0\x9c\x7c\x24\x3f\xac\xe6\x4a\xa8\x76\x60\x16\x0c\xe4\x95\x8e\x06\xe8\x89\x7d\x1c\xe4\x58\x54\xa0\x1d\x2f\x9a\xfa\x0a\x78\x9e\xe7\x97\x87\xed\x30\x7d\x78\x7f\xf7\xb0\x9b\x60\xcd\xb9\x9d\x83\xbb\x57\x19\x9f\xea\x3b\x4b\xce\xbf\x55\xf0\x2f\xee\xbb\xc2\x15\x60\x4e\x17\x33\x78\xcd\xf6\xc8\x4e\x2d\x05\x2b\xeb\x5f\x3c\x48\x10\xdc\x04\x1a\x6b\xd6\x67\x71\x3c\x69\x23\x40\x97\xc5\x7e\x4f\xae\x6e\x21\x41\x5c\x94\xbc\xb5\x63\x02\x4f\x4d\xc4\x73\xb7\x1a\x7b\xbc\x28\x0b\x74\xb8\x57\xfb\x4e\xd8\x20\xa7\x60\x14\xda\x42\x8c\x94\xba\x16\xa2\x67\x6b\x38\xdf\x83\x68\x83\xa0\xc6\x98\x94\x4a\x46\xaf\x11\x2f\xce\xc4\x6b\xf7\x55\x08\xda\x93\xb5\x8a\xb8\xde\x1a\x6b\x09\xad\xc1\x9e\x51\xcc\x75\x77\x9f\x47\xc1\x36\x9d\x32\xd5\x45\x41\xcb\x7f\xd2\x73\x5b\xb3\x2b\x74\x05\xe5\x48\x1e\xad\x79\x12\xf2\xbd\x60\xc4\x23\x24\x8f\x56\xa7\x2c\x09\x46\xf2\x0b\x61\x0c\x46\x68\x92\xdb\x00\x0a\xc6\xc3\x7a\x21\x45\x36\x86\xa2\x8e\x03\x75\xa4\xe6\x8d\x63\x04\x19\x50\x29\x75\xab\x4a\x17\x40\xe0\xd9\xe5\xc1\x22\x17\x03\x9e\xcc\x9d\xfb\x19\x75\xab\x58\xac\x56\x29\x3d\x08\xf6\x1c\x03\x8a\x11\x39\x0d\x0e\xca\xd9\x2c\x75\xe4\xae\x6e\x84\xe7\x82\x62\x20\xc8\x74\xc2\xe8\x04\x43\x20\x1d\x31\x10\x9c\xb9\xce\x5f\x2d\xb3\xee\x2d\x01\x04\x8b\x8d\x36\xf4\x19\xb8\x3a\x90\xfc\x26\xc0\xe5\xd4\xfd\x80\x86\x4e\xf7\xee\xa9\x6d\x31\x1e\x60\x93\xbb\x3e\x6f\x70\xa5\xa8\xc9\x80\x55\x68\x98\x23\x58\x3d\x0c\x14\x97\x11\x68\x35\x87\x9b\x2c\xdd\xdd\x82\xc7\x86\x79\x6b\x1a\x1a\xb3\x60\x29\xc4\xc9\xe5\x3e\xef\x65\x51\xb1\xf4\x8a\xe7\x94\xd0\xab\xfb\x4a\x61\xbb\x4c\x72\x04\x6d\x59\x46\xa7\x33\xa9\x6e\x8e\xa9\x67\x0a\x1d\x6a\x71\x7f\x59\xaa\xf6\x66\xc7\x84\xd6\x02\xde\x80\x10\x76\xde\xdf\x6f\x62\xef\xdf\x0c\x5f\x8e\xb0\x1c\x61\x41\x31\x2e\xb9\xaf\x08\x54\xc0\x0f\x64\xb2\xdd\x4b\xbc\x2f\x64\x8c\xae\x42\xcd\x94\xbe\x6c\xc8\x96\x2e\xfa\xf6\x8d\x6c\x40\xff\x96\xf0\xe9\xfc\x9a\x7d\xfa\xe5\xd7\xdf\x59\x06\xd3\x9d\xf9\xf5\x29\x6c\x2d\x7a\x8e\x53\xb9\xa6\xf7\xe1\xe1\xda\x0c\x1d\xdd\x33\xa6\x6e\x02\x09\xae\xa1\xe7\xb7\xe0\x9f\xde\xaf\xd8\x9b\x3f\x3f\xfd\x13\x00\x00\xff\xff\xf9\xba\x5c\x0e\x67\x11\x00\x00")

func filterfilesBlockedsitesJsonBytes() ([]byte, error) {
	return bindataRead(
		_filterfilesBlockedsitesJson,
		"filterfiles/blockedsites.json",
	)
}

func filterfilesBlockedsitesJson() (*asset, error) {
	bytes, err := filterfilesBlockedsitesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "filterfiles/blockedsites.json", size: 4455, mode: os.FileMode(509), modTime: time.Unix(1490432671, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filterfilesDontbumpJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xce\xb1\xaa\x02\x31\x10\x46\xe1\x3e\x4f\xf1\x33\xf5\x12\xee\x6d\xd3\xfa\x08\x96\x62\x31\x8e\x21\x09\xeb\x26\x21\x19\x11\x59\xf6\xdd\x2d\x6c\x57\x24\xf6\xe7\x83\xb3\xd2\xec\x9f\x8f\xd2\xae\x9d\xdc\xc9\x00\xab\x01\x00\x3a\x94\xac\x3e\x2b\x39\x50\x68\x5c\xa3\x4d\xb9\x2b\x87\xc6\x8b\x95\xb2\xd0\xf4\xae\x8e\x52\x9a\x27\x87\x3f\x03\x6c\xd3\xae\x4e\x3f\x4b\xae\xd5\xf6\xcc\x55\x22\xeb\x30\x4d\x36\x24\x8d\xf7\xcb\x1e\xfc\xff\x0c\xbb\x8c\x82\x1b\xcb\x3c\x68\xbe\x9c\x99\xf3\xf6\x0a\x00\x00\xff\xff\x11\xfc\x29\xf5\x95\x01\x00\x00")

func filterfilesDontbumpJsonBytes() ([]byte, error) {
	return bindataRead(
		_filterfilesDontbumpJson,
		"filterfiles/dontbump.json",
	)
}

func filterfilesDontbumpJson() (*asset, error) {
	bytes, err := filterfilesDontbumpJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "filterfiles/dontbump.json", size: 405, mode: os.FileMode(509), modTime: time.Unix(1490432849, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filterfilesExceptionsitelistJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xcb\xb1\x0e\x82\x30\x14\x05\xd0\xbd\x5f\x71\xf3\x66\x42\x74\xed\xea\x27\x38\x1a\x87\x5a\x1e\xd5\x80\xbd\xa4\x6d\x04\x43\xf8\x77\x63\x5c\xbb\xc8\x7e\xce\x2a\x83\xbe\x67\xa6\x2e\x8b\xbd\x18\x60\x35\x00\x20\x27\xc6\xa2\xb1\x88\x85\xf4\x8c\x25\xb7\x81\x0c\xa3\xba\xe9\x91\x5b\xcf\xa7\x34\x3f\x76\xf6\x4c\x2a\x16\x07\x03\x6c\x4d\xb5\xe7\xe2\xfc\xa0\x8b\xbf\xbb\x18\x74\xcf\xe5\x4b\x53\x3f\x72\xfe\xf3\x76\x89\xd3\x8d\x4b\x6d\x1d\xbf\xcb\x5c\xb7\x4f\x00\x00\x00\xff\xff\x0f\x46\xd6\x14\xfc\x00\x00\x00")

func filterfilesExceptionsitelistJsonBytes() ([]byte, error) {
	return bindataRead(
		_filterfilesExceptionsitelistJson,
		"filterfiles/exceptionsitelist.json",
	)
}

func filterfilesExceptionsitelistJson() (*asset, error) {
	bytes, err := filterfilesExceptionsitelistJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "filterfiles/exceptionsitelist.json", size: 252, mode: os.FileMode(509), modTime: time.Unix(1490432969, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filterfilesStopwordsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xce\xcd\x0a\xc2\x30\x10\x04\xe0\x7b\x9e\x62\xd8\xab\x05\x5b\x51\x90\x5e\x7d\x04\x8f\xe2\x21\xb4\x2b\x16\xd3\xa4\x6c\x53\x6d\x28\x7d\x77\xc1\x9f\x4b\x90\x40\xbd\x0e\xfb\xed\xcc\x44\x37\x0e\x0f\x27\x75\x4f\xe5\x49\x01\x93\x02\x00\x3a\x38\xeb\xd9\x7a\x2a\x41\x6d\x63\x2e\x94\xbd\xe3\x63\xe5\x84\xa9\xc4\x26\xcf\x15\x30\x67\x3f\xc1\xd5\x89\x0d\x8b\x44\xe7\xc4\xc6\x60\x97\xb8\xef\x79\x1c\xb4\x31\x01\x3c\x76\xa6\xa9\x1a\x1f\xe3\x22\x4f\xd5\x15\xfb\x15\x02\x6b\xe9\xa1\x6d\x0d\x77\x67\x59\xe6\x75\x3d\x18\x8f\xea\x13\x44\x74\x9b\x92\xad\xf6\x83\xf0\x5f\xf4\x55\xba\x4e\x3f\xf8\xce\x56\xe7\xf9\x19\x00\x00\xff\xff\x3e\xd1\x93\x64\xd8\x01\x00\x00")

func filterfilesStopwordsJsonBytes() ([]byte, error) {
	return bindataRead(
		_filterfilesStopwordsJson,
		"filterfiles/stopwords.json",
	)
}

func filterfilesStopwordsJson() (*asset, error) {
	bytes, err := filterfilesStopwordsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "filterfiles/stopwords.json", size: 472, mode: os.FileMode(509), modTime: time.Unix(1490433029, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"filterfiles/blockedmimes.json": filterfilesBlockedmimesJson,
	"filterfiles/blockedsites.json": filterfilesBlockedsitesJson,
	"filterfiles/dontbump.json": filterfilesDontbumpJson,
	"filterfiles/exceptionsitelist.json": filterfilesExceptionsitelistJson,
	"filterfiles/stopwords.json": filterfilesStopwordsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"filterfiles": &bintree{nil, map[string]*bintree{
		"blockedmimes.json": &bintree{filterfilesBlockedmimesJson, map[string]*bintree{}},
		"blockedsites.json": &bintree{filterfilesBlockedsitesJson, map[string]*bintree{}},
		"dontbump.json": &bintree{filterfilesDontbumpJson, map[string]*bintree{}},
		"exceptionsitelist.json": &bintree{filterfilesExceptionsitelistJson, map[string]*bintree{}},
		"stopwords.json": &bintree{filterfilesStopwordsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

